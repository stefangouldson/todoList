{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todos","props","state","todos","text","removeItem","bind","e","preventDefault","this","setState","target","value","index","filter","todo","todoIndex","className","onSubmit","addTodo","placeholder","onChange","updateValue","type","Component","TodoList","map","key","onClick","rootElement","document","getElementById","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAGqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,GAAIC,KAAM,IAChC,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAHD,E,qEAMXC,GACNA,EAAEC,iBACFC,KAAKC,SAAS,CAAEP,MAAM,CAAEM,KAAKP,MAAME,MAAd,mBAAuBK,KAAKP,MAAMC,QAAQC,KAAM,O,kCAG3DG,GACVE,KAAKC,SAAS,CAAEN,KAAM,CAACG,EAAEI,OAAOC,W,iCAEvBC,GACT,IAAMV,EAAQM,KAAKP,MAAMC,MAAMW,QAAO,SAACC,EAAMC,GAC3C,OAAOA,IAAcH,KAEvBJ,KAAKC,SAAS,CAAEP,Y,+BAER,IAAD,OACP,OACE,yBAAKc,UAAU,QACf,yBAAKA,UAAU,WACf,wBAAIA,UAAU,SAAd,cACE,0BAAMC,SAAU,SAAAX,GAAC,OAAI,EAAKY,QAAQZ,KAChC,2BACEa,YAAY,YACZR,MAAOH,KAAKP,MAAME,KAClBiB,SAAU,SAAAd,GACR,EAAKe,YAAYf,MAGrB,4BAAQU,UAAU,SAASM,KAAK,UAAhC,gBAEF,kBAAC,EAAD,CAAUpB,MAAOM,KAAKP,MAAMC,MAAOE,WAAYI,KAAKJ,mB,GApCzBmB,aA2C7BC,E,iLACM,IAAD,OACP,OACE,4BACGhB,KAAKR,MAAME,MAAMuB,KAAI,SAACX,EAAMF,GAC3B,OACE,6BACE,wBAAIc,IAAKZ,GAAOA,GAChB,4BAAQE,UAAU,eAChBW,QAAS,SAAArB,GACP,EAAKN,MAAMI,WAAWQ,KAF1B,mB,GARSW,aAuBjBK,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAAWJ,GC1DPK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNN,IAASC,OAAO,kBAAC,EAAD,MAASH,SAASC,eAAe,SD2H3C,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ce288c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nexport default class Todos extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { todos: [], text: \"\" };\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  addTodo(e) {\n    e.preventDefault();\n    this.setState({ todos: [this.state.text, ...this.state.todos], text: \"\" });\n  }\n\n  updateValue(e) {\n    this.setState({ text: [e.target.value] });\n  }\n  removeItem(index) {\n    const todos = this.state.todos.filter((todo, todoIndex) => {\n      return todoIndex !== index;\n    });\n    this.setState({ todos });\n  }\n  render() {\n    return (\n      <div className=\"page\">\n      <div className=\"content\">\n      <h1 className=\"title\">To do list</h1>\n        <form onSubmit={e => this.addTodo(e)}>\n          <input\n            placeholder=\"Type here\"\n            value={this.state.text}\n            onChange={e => {\n              this.updateValue(e);\n            }}\n          />\n          <button className=\"button\" type=\"submit\">Add to list</button>\n        </form>\n        <TodoList todos={this.state.todos} removeItem={this.removeItem} />\n      </div>\n      </div>\n    );\n  }\n}\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.todos.map((todo, index) => {\n          return (\n            <div>\n              <li key={todo}>{todo}</li>\n              <button className=\"removeButton\"\n                onClick={e => {\n                  this.props.removeItem(index);\n                }}\n              >\n                Remove\n              </button>\n            </div>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Todos />, rootElement);\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}